@page "/reservation/{Id:guid?}"

@using MovieTheaterProject.Domain.Contracts.Responses.Movie
@using MovieTheaterProject.Domain.Contracts.Responses.MovieTheater
@using MovieTheaterProject.Domain.Contracts.Responses.MovieViewing
@using MovieTheaterProject.Domain.Contracts.Responses.Reservation
@using MovieTheaterProject.Domain.Entities
@using MovieTheaterProject.UI.Utilities.MovieManager
@using MovieTheaterProject.UI.Utilities.MovieViewingManager
@using MovieTheaterProject.UI.Utilities.ReservationManager
@using System.Text.Json

@inject HttpClient Http
@inject IJSRuntime JS
@inject IMovieManager movieManager
@inject IMovieViewingManager movieViewingManager
@inject IReservationManager reservationManager
@inject NavigationManager NavManager

@if (Id is null)
{
    <form>
        <div class="form-group">
            <label for="reservationIdInput">Reservation Id</label>
            <input type="text" class="form-control" id="reservationIdInput" aria-describedby="reservation Id Input" placeholder="Reservation Id Input" @bind="_idInputValue">
            <small id="reservationIdInputHelp" class="form-text text-muted">Input the reservation Id that you received when making a recervation.</small>
        </div>
        <br />
        <button type="button" class="btn btn-primary" @onclick="HandleLoadReservationButtonClicked">Load Reservation</button>
    </form>
}
else if (_dataLoaded)
{
    <div>
        <div class="row">
            <div class="col-lg-10">
                <h4>@_movie.Name</h4>
            </div>
            <div class="col-lg-2">
                <button class="btn btn-link @_printCssClass" @onclick="HandlePrintButtonClicked">Print</button>
            </div>
        </div>
        <hr />
        <dl class="row">
            <dt class="col-sm-4">Reservation ID (Keep this for future use)</dt>
            <dd class="col-sm-8">@Id</dd>
            <dt class="col-sm-4">Name</dt>
            <dd class="col-sm-8">@_movie.Name</dd>
            <dt class="col-sm-4">Movie Theater Name</dt>
            <dd class="col-sm-8">@_movieTheater.Name</dd>
            <dt class="col-sm-4">Start Time</dt>
            <dd class="col-sm-8">@_movieStartTime.Hours:@_movieStartTime.Minutes:00</dd>
            <dt class="col-sm-4">Duration</dt>
            <dd class="col-sm-8">@_movieDuration.Hours:@_movieDuration.Minutes:00</dd>
            <dt class="col-sm-4">Seats Selected</dt>
            <dd class="col-sm-8">
                @foreach (var seat in _reservation.SeatsSelected)
                {
                    var tokens = seat.Split('-');
                    var row = ushort.Parse(tokens[0]);
                    var column = ushort.Parse(tokens[1]);

                    <p>@row:@column</p>
                }
            </dd>
            <dt class="col-sm-4">Price paid</dt>
            <dd class="col-sm-8">@Math.Round(_reservation.PricePaid, 2)</dd>
        </dl>
    </div>
}

@code {
    [Parameter]
    public Guid? Id { get; set; }
    private string? _idInputValue { get; set; }

    private bool _dataLoaded = false;

    private ReservationResponse _reservation;
    private MovieViewingResponse _movieViewing;
    private MovieResponse _movie;
    private MovieTheaterResponse _movieTheater;

    private TimeSpan _movieDuration;
    private TimeSpan _movieStartTime;

    private bool _collapsePrintButton = false;
    private string? _printCssClass => _collapsePrintButton ? "collapse" : null;

    private async Task<bool> LoadReservationDataAsync()
    {
        _reservation = await reservationManager.GetReservationById((Guid)Id);
        return _reservation is not null;
    }

    private async Task<bool> LoadMovieViewingDataAsync()
    {
        var movieViewing = await movieViewingManager.GetMovieViewingById(_reservation.MovieViewingId);
        if (movieViewing is null)
            return false;

        _movieViewing = movieViewing;
        _movieStartTime = new(0, 0, (int)_movieViewing.StartTime);
        return true;
    }

    private async Task<bool> LoadMovieDataAsync()
    {
        var movie = await movieManager.GetMovieById(_movieViewing.MovieId);
        if (movie is null)
            return false;

        _movie = movie;
        _movieDuration = new(0, 0, (int)_movie.Duration);
        return true;
    }

    private async Task<bool> LoadMovieTheaterDataAsync()
    {
        _movieTheater = await Http.GetFromJsonAsync<MovieTheaterResponse>($"api/movietheaters/{_movieViewing.MovieTheaterId}");
        return _movieTheater is not null;
    }

    protected async Task HandleLoadReservationButtonClicked()
    {
        var parsed = Guid.TryParse(_idInputValue, out var id);
        if (!parsed)
            return;
        Id = id;

        if (!await LoadDataAsync())
        {
            await JS.InvokeVoidAsync("AddToast", 
                $"Could not load reservation details", 
                "Reservation Notification", 
                false);
            Id = null;
        }
    }

    protected async Task HandlePrintButtonClicked()
    {
        _collapsePrintButton = true;

        var toggledNavMenu = false;
        if (NavMenu.collapseNavMenu)
        {
            toggledNavMenu = true;
            NavMenu.ToggleNavMenu();
        }

        await Task.Delay(100);

        await JS.InvokeVoidAsync("window.print");

        if (toggledNavMenu)
            NavMenu.ToggleNavMenu();

        _collapsePrintButton = false;
    }

    protected async Task<bool> LoadDataAsync()
    {
        try
        {
            if (!await LoadReservationDataAsync())
                return false;

            if (!await LoadMovieViewingDataAsync())
                return false;
            if (!await LoadMovieDataAsync())
                return false;

            if (!await LoadMovieTheaterDataAsync())
                return false;

            _dataLoaded = true;

            return true;
        }
        catch
        {
            return false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id is null)
            return;

        if (!await LoadDataAsync())
        {
            await JS.InvokeVoidAsync("AddToast", 
                $"Could not load reservation details", 
                "Reservation Notification", 
                false);
            Id = null;
        }
    }
}