@page "/movie/{Id:guid}"
@using MovieTheaterProject.Domain.Contracts.Requests.Movie
@using MovieTheaterProject.Domain.Contracts.Responses.Movie
@using MovieTheaterProject.Domain.Contracts.Responses.MovieTheater
@using MovieTheaterProject.Domain.Contracts.Responses.MovieViewing
@using MovieTheaterProject.UI.Utilities.LoginManager
@using MovieTheaterProject.UI.Utilities.MovieViewingManager
@using MovieTheaterProject.UI.Utilities.ReservationManager

@inject HttpClient Http
@inject IJSRuntime JS
@inject ILoginManager loginManager
@inject IMovieViewingManager movieViewingManager
@inject IReservationManager reservationManager
@inject NavigationManager NavManager

<PageTitle>Movies</PageTitle>

<h1>Movie</h1>

@if (movie is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <div class="row">
            <div class="col-sm-8">
                <h4>@movie!.Name</h4>
            </div>
            @if (loginManager.IsLoggedIn())
            {
                <div class="col-sm-4 float-end">
                    <button type="button" class="btn btn-warning" @onclick="NavigateToEditMovie">Edit Movie</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteMovie">Delete Movie</button>
                </div>
            }
        </div>
        <hr />
        <dl class="row">
            <dt class = "col-sm-2">Name</dt>
            <dd class = "col-sm-10">@movie!.Name</dd>
            <dt class = "col-sm-2">Description</dt>
            <dd class = "col-sm-10">@movie!.Description</dd>
            <dt class = "col-sm-2">Price</dt>
            <dd class = "col-sm-10">@movie!.Price</dd>
            <dt class = "col-sm-2">Duration</dt>
            <dd class = "col-sm-10">@duration.Hours:@duration.Minutes:00</dd>
        </dl>
    </div>

    @if (movieViewings is not null && movieViewings.Length > 0)
    {
        <br />
        <br />
        <h1>Viewings</h1>
        <table class="table">
            <thead>
                <th>Movie Theater Name</th>
                <th>Movie Theater Dimensions</th>
                <th>Start Time</th>
                <th>Action</th>
            </thead>
            <tbody>
                @foreach (var movieViewing in (movieViewings ?? new MovieViewingResponse[0]))
                {
                    @if (movieTheaters[movieViewing.MovieTheaterId] is null)
                    {
                        continue;
                    }
                    <tr>
                        <td>@movieTheaters[movieViewing.MovieTheaterId]!.Name</td>
                        <td>@movieTheaters[movieViewing.MovieTheaterId]!.Rows x @movieTheaters[movieViewing.MovieTheaterId]!.Columns</td>
                        <td>@(
                        new TimeSpan(0, 0, (int)movieViewing.StartTime).Hours
                        ):@(
                              new TimeSpan(0, 0, (int)movieViewing.StartTime).Minutes
                              ):@(
                              new TimeSpan(0, 0, (int)movieViewing.StartTime).Seconds
                              )</td>
                        <td>
                            <button type="button" class="btn btn-info" @onclick="(e) => ReserveSeats(movieViewing.Id)">Reserve seats</button>
                            @if (loginManager.IsLoggedIn())
                            {
                                <button type="button" class="btn btn-danger" @onclick="(e) => DeleteMovieViewing(movieViewing.Id)">Remove viewing</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private MovieResponse? movie;
    private TimeSpan duration;

    private MovieViewingResponse[]? movieViewings;
    private Dictionary<Guid, MovieTheaterResponse?> movieTheaters = new();

    protected void ReserveSeats(Guid id)
    {
        NavManager.NavigateTo($"/reserve/{id}");
    }

    private async Task DeleteMovie()
    {
        if (!loginManager.IsLoggedIn())
            return;

        if (movieViewings is null)
            movieViewings = await movieViewingManager.GetMovieViewingsByMovieId(Id);

        if (movieViewings is null)
        {
            await JS.InvokeVoidAsync("AddToast", 
                $"Could not load movie viewings", 
                "Movie Details Notification", 
                false);

            return;
        }

        if (movieViewings.Length != 0)
        {
            await JS.InvokeVoidAsync("AddToast",
                $"Could not delete movie cause there are movie viewings scheduled",
                "Movie Details Notification",
                false);

            return;
        }

        using var response = await Http.DeleteAsync($"api/movies/{Id}");

        await JS.InvokeVoidAsync("AddToast",
                $"Succesfully deleted movie",
                "Movie Details Notification",
                false);

        await Task.Delay(2000);

        NavManager.NavigateTo("/");
    }

    private void NavigateToEditMovie()
    {
        if (!loginManager.IsLoggedIn())
            return;
        NavManager.NavigateTo($"/editmovie/{Id}");
    }

    private async Task DeleteMovieViewing(Guid movieViewingId)
    {
        if (!loginManager.IsLoggedIn())
            return;

        var reservations = await reservationManager.GetReservationsByMovieViewingId(movieViewingId);

        if (reservations is null)
        {
            await JS.InvokeVoidAsync("AddToast", 
                $"Could not load reservations", 
                "Movie Details Notification", 
                false);

            return;
        }

        if (reservations.Length != 0)
        {
            await JS.InvokeVoidAsync("AddToast",
               $"Could not delete movie cause there are seats reserved",
               "Movie Details Notification",
               false);

            return;
        }

        await movieViewingManager.DeleteMovieViewing(movieViewingId);

        movieViewings = movieViewings!.ToList()
            .Where(movieViewing => movieViewing.Id != movieViewingId)
            .ToArray();

        await JS.InvokeVoidAsync("AddToast",
            $"Succesfully deleted viewing",
            "Movie Details Notification",
            false);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            movie = await Http.GetFromJsonAsync<MovieResponse>($"api/movies/{Id}");
            if (movie is null)
                throw new Exception();


            movieViewings = await movieViewingManager.GetMovieViewingsByMovieId(Id);
            if (movieViewings is null)
            {
                await JS.InvokeVoidAsync("AddToast", 
                    $"Could not load movie viewings", 
                    "Movie Details Notification", 
                    false);

                return;
            }

            foreach (var movieViewing in movieViewings)
            {
                if (!movieTheaters.ContainsKey(movieViewing.MovieTheaterId))
                    movieTheaters[movieViewing.MovieTheaterId] = await Http.GetFromJsonAsync<MovieTheaterResponse>($"api/movietheaters/{movieViewing.MovieTheaterId}");
            }
        }
        catch
        {
            NavManager.NavigateTo("/404");
        }

        duration = new TimeSpan(0, 0, (int)(movie!.Duration));
    }
}