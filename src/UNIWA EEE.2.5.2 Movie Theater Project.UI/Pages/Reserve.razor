@page "/reserve/{Id:guid}"
@using MovieTheaterProject.Domain.Contracts.Responses.Movie
@using MovieTheaterProject.Domain.Contracts.Responses.MovieTheater
@using MovieTheaterProject.Domain.Contracts.Responses.MovieViewing
@using MovieTheaterProject.Domain.Contracts.Responses.Reservation
@using MovieTheaterProject.Domain.Contracts.Requests.Reservation
@using MovieTheaterProject.Domain.Entities
@using System.Net.Http.Json
@using System.Text
@inject HttpClient Http
@inject NavigationManager NavManager

@if (movie is null || movieTheater is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (alert is not null)
    {
        <Alert Text="Cannot select more than 4 seats" Type="danger" OnClose="() => alert = null" />
    }

    <div>
        <p id="ReserveMovieId" hidden>@Id</p>
        <p id="ReservePricePerSeat" hidden>@movie!.Price</p>
        <h4>@movie!.Name</h4>
        <hr />
        <dl class="row">
            <dt class = "col-sm-2">Name</dt>
            <dd class = "col-sm-10">@movie!.Name</dd>
            <dt class = "col-sm-2">Description</dt>
            <dd class = "col-sm-10">@movie!.Description</dd>
            <dt class = "col-sm-2">Price</dt>
            <dd class = "col-sm-10">@movie!.Price</dd>
            <dt class = "col-sm-2">Duration</dt>
            <dd class = "col-sm-10">@duration.Hours:@duration.Minutes:00</dd>
        </dl>
    </div>

    <br />
    <br />

    <MovieViewing MovieViewingId=@movieViewing!.Id IdPrefix="ReserveSeat" Reserved=@reserved Rows=@movieTheater.Rows Columns=@movieTheater.Columns OnSeatChange="HandleOnSeatChange" /> 

    <br />
    <br />

    <footer class="mt-auto">
        <dl class="row">
            <dt class = "col-sm-2">
                Number Of Seats:
            </dt>
            <dd class = "col-sm-10">
                @NumberOfSeats
            </dd>

            <dt class = "col-sm-2">
                Price:
            </dt>
            <dd class = "col-sm-10">
                @PriceToPay
            </dd>
        </dl>

        <br />

        <div class="row">
            <button class="btn btn-primary" style="width: 100%" @onclick="HandleReserveSeatsButtonClicked">Reserve Seats</button>
        </div>
    </footer>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }

    private MovieViewingResponse? movieViewing;

    private MovieResponse? movie;
    private TimeSpan duration;
    private MovieTheaterResponse? movieTheater;
    private ReservationResponse[] reservations;

    private bool[,] reserved;

    private int NumberOfSeats { get; set; }
    private double PriceToPay
    {
        get
        {
            return Math.Round(NumberOfSeats * movie!.Price, 2);
        }
    }

    private List<string> seatsReserved = new();
    private ushort NumberOfSeatsReserved = 0;
    private object? alert = null;

    private void HandleOnSeatChange(KeyValuePair<ushort, ushort> rowColumn)
    {
        var row = rowColumn.Key + 1;
        var column = rowColumn.Value + 1;

        var seat = new StringBuilder().Append(row).Append('-').Append(column).ToString();
        Console.WriteLine(seat);
        if (seatsReserved.Contains(seat))
        {
            Console.WriteLine("Seat to be removed");
            seatsReserved.Remove(seat);
        }
        else
        {
            Console.WriteLine("Seat to be added");
            seatsReserved.Add(seat);
        }

        NumberOfSeats = seatsReserved.Count;

        if (4 < NumberOfSeats)
            alert = new();
    }

    private async Task HandleReserveSeatsButtonClicked()
    {
        if (4 < seatsReserved.Count)
            return;

        var createReservationRequest = new CreateReservationRequest()
        {
            MovieViewingId = movieViewing!.Id.ToString(),
            SeatsSelected = seatsReserved
        };

        using var response = await Http.PostAsJsonAsync("api/reservations", createReservationRequest);

        var reservation = await response.Content.ReadFromJsonAsync<ReservationResponse>();

        Console.WriteLine($"Reservation ID: {reservation!.Id}\nReservation Price: {reservation!.PricePaid}");
    }

    private bool SeatReserved(ushort row, ushort column)
    {
        column += 1;
        row += 1;

        var str = new StringBuilder().Append(row).Append('-').Append(column).ToString();

        foreach (var reservation in reservations)
        {
            if (reservation.SeatsSelected.Contains(str))
                return true;
        }

        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            movieViewing = await Http.GetFromJsonAsync<MovieViewingResponse>($"api/movieviewings/{Id}");
            if (movieViewing is null)
                throw new Exception();

            movie = await Http.GetFromJsonAsync<MovieResponse>($"api/movies/{movieViewing.MovieId}");
            movieTheater = await Http.GetFromJsonAsync<MovieTheaterResponse>($"api/movietheaters/{movieViewing.MovieTheaterId}");
            reservations = (await Http.GetFromJsonAsync<GetAllReservationsResponse>($"api/reservations?MovieViewingId={movieViewing.Id}")).Reservations.ToArray();
            if (movie is null || movieTheater is null)
                throw new Exception();

            reserved = new bool[movieTheater.Rows, movieTheater.Columns];
            for (ushort row = 0; row < movieTheater.Rows; row++)
            {
                for (ushort column = 0; column < movieTheater.Columns; column++)
                {
                    reserved[row, column] = SeatReserved(row, column);
                }
            }

            duration = new TimeSpan(0, 0, (int)movie.Duration);
        }
        catch
        {
            NavManager.NavigateTo("/404");
        }
    }
}