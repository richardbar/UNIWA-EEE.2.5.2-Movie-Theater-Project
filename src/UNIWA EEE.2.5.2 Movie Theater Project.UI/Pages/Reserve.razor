@page "/reserve/{Id:guid}"
@using MovieTheaterProject.Domain.Contracts.Responses.Movie
@using MovieTheaterProject.Domain.Contracts.Responses.MovieTheater
@using MovieTheaterProject.Domain.Contracts.Responses.MovieViewing
@using MovieTheaterProject.Domain.Contracts.Responses.Reservation
@using MovieTheaterProject.Domain.Contracts.Requests.Reservation
@using MovieTheaterProject.Domain.Entities
@using System.Net.Http.Json
@using System.Text
@inject HttpClient Http
@inject NavigationManager NavManager

@if (!_dataLoaded)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (_alertVisible == true)
    {
        <Alert Text="Cannot select more than 4 seats" Type="danger" OnClose="() => _alertVisible = false" />
    }

    <div>
        <p id="ReserveMovieId" hidden>@Id</p>
        <p id="ReservePricePerSeat" hidden>@_movie.Price</p>
        <h4>@_movie.Name</h4>
        <hr />
        <dl class="row">
            <dt class = "col-sm-2">Name</dt>
            <dd class = "col-sm-10">@_movie.Name</dd>
            <dt class = "col-sm-2">Description</dt>
            <dd class = "col-sm-10">@_movie.Description</dd>
            <dt class = "col-sm-2">Price</dt>
            <dd class = "col-sm-10">@_movie.Price</dd>
            <dt class = "col-sm-2">Duration</dt>
            <dd class = "col-sm-10">@_movieDuration.Hours:@_movieDuration.Minutes:00</dd>
        </dl>
    </div>

    <br />
    <br />

    <MovieViewing MovieViewingId=@_movieViewing.Id IdPrefix="ReserveSeat" Reserved=@_reservedSeats Rows=@_movieTheater.Rows Columns=@_movieTheater.Columns OnSeatChange="HandleOnSeatChange" /> 

    <br />
    <br />

    <footer class="mt-auto">
        <dl class="row">
            <dt class = "col-sm-2">
                Number Of Seats:
            </dt>
            <dd class = "col-sm-10">
                @_numberOfSeats
            </dd>

            <dt class = "col-sm-2">
                Price:
            </dt>
            <dd class = "col-sm-10">
                @_priceToPay
            </dd>
        </dl>

        <br />

        <div class="row">
            <button class="btn btn-primary" style="width: 100%" @onclick="HandleReserveSeatsButtonClicked">Reserve Seats</button>
        </div>
    </footer>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }

    private bool _dataLoaded = false;
    private bool _alertVisible = false;

    private MovieViewingResponse _movieViewing;
    private MovieResponse _movie;
    private MovieTheaterResponse _movieTheater;
    private ReservationResponse[] _reservations;

    private TimeSpan _movieDuration;

    private bool[,] _reservedSeats;

    private List<string> _seatsReserved = new();
    private int _numberOfSeats { get; set; }
    private double _priceToPay
    {
        get
        {
            return Math.Round(_numberOfSeats * _movie!.Price, 2);
        }
    }

    private void HandleOnSeatChange(KeyValuePair<ushort, ushort> rowColumn)
    {
        var row = rowColumn.Key + 1;
        var column = rowColumn.Value + 1;

        var seat = new StringBuilder().Append(row).Append('-').Append(column).ToString();
        if (_seatsReserved.Contains(seat))
            _seatsReserved.Remove(seat);
        else
            _seatsReserved.Add(seat);

        _numberOfSeats = _seatsReserved.Count;

        _alertVisible = (4 < _numberOfSeats);
    }

    private async Task HandleReserveSeatsButtonClicked()
    {
        if (4 < _seatsReserved.Count)
        {
            _alertVisible = true;
            return;
        }

        var createReservationRequest = new CreateReservationRequest()
        {
            MovieViewingId = _movieViewing.Id.ToString(),
            SeatsSelected = _seatsReserved
        };

        using var response = await Http.PostAsJsonAsync("api/reservations", createReservationRequest);

        var reservation = await response.Content.ReadFromJsonAsync<ReservationResponse>();
        
        NavManager.NavigateTo($"/reservation/{reservation!.Id}");
    }

    private bool SeatReserved(ushort row, ushort column)
    {
        column += 1;
        row += 1;

        var str = new StringBuilder().Append(row).Append('-').Append(column).ToString();

        foreach (var reservation in _reservations)
        {
            if (reservation.SeatsSelected.Contains(str))
                return true;
        }

        return false;
    }

    private async Task LoadMovieViewingData()
    {
        var movieViewingTmp = await Http.GetFromJsonAsync<MovieViewingResponse>($"api/movieviewings/{Id}");
        if (movieViewingTmp is null)
            throw new Exception();

        _movieViewing = movieViewingTmp;
    }

    private async Task LoadMovieData()
    {
        if (_movieViewing is null)
            throw new Exception();

        var movieTmp = await Http.GetFromJsonAsync<MovieResponse>($"api/movies/{_movieViewing.MovieId}");
        if (movieTmp is null)
            throw new Exception();

        _movie = movieTmp;
        _movieDuration = new TimeSpan(0, 0, (int)_movie.Duration);
    }

    private async Task LoadMovieTheaterData()
    {
        if (_movieViewing is null)
            throw new Exception();

        var movieTheaterTmp = await Http.GetFromJsonAsync<MovieTheaterResponse>($"api/movietheaters/{_movieViewing.MovieTheaterId}");
        if (movieTheaterTmp is null)
            throw new Exception();

        _movieTheater = movieTheaterTmp;
    }

    private async Task LoadReservationsData()
    {
        if (_movieViewing is null)
            throw new Exception();

        var reservationsTmp = await Http.GetFromJsonAsync<GetAllReservationsResponse>($"api/reservations?MovieViewingId={_movieViewing.Id}");
        if (reservationsTmp is null)
            throw new Exception();

        var reservationArrayTmp = reservationsTmp.Reservations.ToArray();
        _reservations = reservationArrayTmp;

        _reservedSeats = new bool[_movieTheater.Rows, _movieTheater.Columns];
        for (ushort row = 0; row < _movieTheater.Rows; row++)
        {
            for (ushort column = 0; column < _movieTheater.Columns; column++)
                _reservedSeats[row, column] = SeatReserved(row, column);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadMovieViewingData();
            await LoadMovieData();
            await LoadMovieTheaterData();
            await LoadReservationsData();

            _dataLoaded = true;
        }
        catch
        {
            NavManager.NavigateTo("/404");
        }
    }
}